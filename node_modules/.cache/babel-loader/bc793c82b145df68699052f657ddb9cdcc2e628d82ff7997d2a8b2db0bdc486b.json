{"ast":null,"code":"var _jsxFileName = \"/Users/arnavgupta/git/hackathon/src/views/index-sections/Encyclopedia.js\",\n  _s = $RefreshSig$();\n// Import necessary libraries and components\nimport React, { useState } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport EncyclopediaCarousel from './EncyclopediaCarousel.js';\nimport './Encyclopedia.css';\n\n// Main function component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Encyclopedia() {\n  _s();\n  // Define API key\n  var apiKey = \"Q3A1YL3AAZWPHNITZOX0A1W8ZI7W75UB6LYEOKAGFKQA47B11G3ZGOCCHMEPJHDJ\";\n\n  // Define state variables\n  const NUM_IMAGES = 1;\n  const [canvasImages, setCanvasImages] = useState(Array(NUM_IMAGES).fill(''));\n  const [userInput, setUserInput] = useState('');\n  const [generatedImage, setGeneratedImage] = useState('');\n  const [responseText, setResponseText] = useState('');\n  const [isLoading, setIsLoading] = useState(false); // State to handle loading status\n  const [dynamicItems, setDynamicItems] = useState(Array(NUM_IMAGES).fill({\n    src: '',\n    altText: '',\n    caption: ''\n  }));\n\n  // Function to generate description using OpenAI API\n  async function generateDescription() {\n    setIsLoading(true); // Set loading state to true\n    const promptText = `Describe ${userInput}. Mention their strengths, weaknesses, and other notable information in 5 sentences or less.`;\n    try {\n      const response = await fetch('https://jamsapi.hackclub.dev/openai/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + apiKey\n        },\n        body: JSON.stringify({\n          model: \"gpt-3.5-turbo\",\n          // Specify the model here\n          messages: [{\n            role: \"user\",\n            // Role can be 'user' or 'assistant'\n            content: promptText\n          }]\n        })\n      });\n      const data = await response.json();\n      // Set the response text state variable with the data received\n      setResponseText(data.choices[0].message.content);\n      console.log(responseText);\n    } catch (error) {\n      console.error('Error:', error);\n      setResponseText('Error in processing request');\n    }\n    setIsLoading(false); // Set loading state to true\n  }\n\n  // Function to generate image URL using OpenAI API\n  async function generateImageURL() {\n    try {\n      const response = await fetch('https://jamsapi.hackclub.dev/openai/images/generations', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + apiKey\n        },\n        body: JSON.stringify({\n          'model': 'dall-e-3',\n          'prompt': userInput,\n          'size': '1024x1024',\n          'n': 1\n        })\n      });\n      const eventsResponse = await response.json();\n      console.log(eventsResponse);\n      const generatedImageUrl = eventsResponse.data[0].url;\n      console.log(generatedImageUrl);\n      return generatedImageUrl;\n    } catch (error) {\n      console.error('Error fetching OpenAI completion:', error);\n      return '';\n    }\n  }\n\n  // Function to handle search input change\n  const handleSearchChange = event => {\n    setUserInput(event.target.value);\n  };\n\n  // Function to handle form submission\n  const handleFormSubmit = async e => {\n    e.preventDefault();\n    await generateDescription();\n    var newItems = dynamicItems;\n    console.log(\"encycolpedia items\" + newItems);\n    var updatedCanvasImages = Array(NUM_IMAGES).fill('');\n    for (let i = 0; i < NUM_IMAGES; i++) {\n      updatedCanvasImages[i] = await generateImageURL();\n      console.log(\"mid of handleFormSubmit \" + updatedCanvasImages[i]);\n    }\n    setCanvasImages(updatedCanvasImages);\n    for (let i = 0; i < NUM_IMAGES; i++) {\n      newItems[i].src = updatedCanvasImages[i];\n      newItems[i].altText = userInput;\n      newItems[i].caption = userInput;\n      console.log(\"newItems: \" + newItems[i].src);\n    }\n    setDynamicItems(newItems);\n    console.log(\"end of handleFormSubmit \" + generatedImage);\n  };\n\n  // Render the component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"encyclopedia-container\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-center\",\n        children: \"Encyclopedia\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"text-center\",\n        children: \"Find information about your enemies.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        xs: \"2\",\n        className: \"xxl\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          className: \"text-left\",\n          children: [/*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleFormSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"inputText\",\n              type: \"text\",\n              value: userInput,\n              onChange: handleSearchChange,\n              placeholder: \"Search the encyclopedia\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 19\n            }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"spinner-border text-gold\",\n              role: \"status\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"sr-only\",\n                children: \"Loading...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"descriptionText\",\n            children: responseText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          className: \"text-right\",\n          children: /*#__PURE__*/_jsxDEV(EncyclopediaCarousel, {\n            items: dynamicItems\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 7\n  }, this);\n}\n_s(Encyclopedia, \"5sQkR9Ir/70HrovfQT0cmI6+ROw=\");\n_c = Encyclopedia;\nexport default Encyclopedia;\nvar _c;\n$RefreshReg$(_c, \"Encyclopedia\");","map":{"version":3,"names":["React","useState","Container","Row","Col","EncyclopediaCarousel","jsxDEV","_jsxDEV","Encyclopedia","_s","apiKey","NUM_IMAGES","canvasImages","setCanvasImages","Array","fill","userInput","setUserInput","generatedImage","setGeneratedImage","responseText","setResponseText","isLoading","setIsLoading","dynamicItems","setDynamicItems","src","altText","caption","generateDescription","promptText","response","fetch","method","headers","body","JSON","stringify","model","messages","role","content","data","json","choices","message","console","log","error","generateImageURL","eventsResponse","generatedImageUrl","url","handleSearchChange","event","target","value","handleFormSubmit","e","preventDefault","newItems","updatedCanvasImages","i","className","children","fileName","_jsxFileName","lineNumber","columnNumber","xs","onSubmit","type","onChange","placeholder","items","_c","$RefreshReg$"],"sources":["/Users/arnavgupta/git/hackathon/src/views/index-sections/Encyclopedia.js"],"sourcesContent":["// Import necessary libraries and components\nimport React, { useState } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport EncyclopediaCarousel from './EncyclopediaCarousel.js';\nimport './Encyclopedia.css';\n\n// Main function component\nfunction Encyclopedia() {\n  // Define API key\n  var apiKey = \"Q3A1YL3AAZWPHNITZOX0A1W8ZI7W75UB6LYEOKAGFKQA47B11G3ZGOCCHMEPJHDJ\";\n\n  // Define state variables\n  const NUM_IMAGES = 1;\n  const [canvasImages, setCanvasImages] = useState(Array(NUM_IMAGES).fill(''));\n  const [userInput, setUserInput] = useState('');\n  const [generatedImage, setGeneratedImage] = useState('');\n  const [responseText, setResponseText] = useState('');\n  const [isLoading, setIsLoading] = useState(false); // State to handle loading status\n  const [dynamicItems, setDynamicItems] = useState(Array(NUM_IMAGES).fill({\n    src: '',\n    altText: '',\n    caption: ''\n  }));\n\n  // Function to generate description using OpenAI API\n  async function generateDescription() {\n    setIsLoading(true); // Set loading state to true\n    const promptText = `Describe ${userInput}. Mention their strengths, weaknesses, and other notable information in 5 sentences or less.`;\n  \n    try {\n        const response = await fetch('https://jamsapi.hackclub.dev/openai/chat/completions', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + apiKey\n            },\n            body: JSON.stringify({\n                model: \"gpt-3.5-turbo\", // Specify the model here\n                messages: [{\n                    role: \"user\", // Role can be 'user' or 'assistant'\n                    content: promptText\n                }]\n            })\n        });\n        const data = await response.json();\n        // Set the response text state variable with the data received\n        setResponseText(data.choices[0].message.content);\n        console.log(responseText);\n    } catch (error) {\n        console.error('Error:', error);\n        setResponseText('Error in processing request');\n    }\n    setIsLoading(false); // Set loading state to true\n  }\n\n  // Function to generate image URL using OpenAI API\n  async function generateImageURL() {\n    try {\n        const response = await fetch('https://jamsapi.hackclub.dev/openai/images/generations', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + apiKey\n          },\n          body: JSON.stringify({\n            'model': 'dall-e-3',\n            'prompt': userInput,\n            'size': '1024x1024',\n            'n': 1\n          })\n        });\n  \n        const eventsResponse = await response.json();\n        console.log(eventsResponse);\n  \n        const generatedImageUrl = eventsResponse.data[0].url;\n        console.log(generatedImageUrl);\n  \n        return generatedImageUrl;\n      } catch (error) {\n        console.error('Error fetching OpenAI completion:', error);\n        return '';\n      }\n    }\n\n  // Function to handle search input change\n  const handleSearchChange = (event) => {\n    setUserInput(event.target.value);\n  }\n\n  // Function to handle form submission\n  const handleFormSubmit = async (e) => {\n    e.preventDefault();\n    await generateDescription();\n    var newItems = dynamicItems;\n\n    console.log(\"encycolpedia items\"+ newItems);\n    var updatedCanvasImages = Array(NUM_IMAGES).fill('');\n\n    for (let i = 0; i < NUM_IMAGES; i++) {\n      updatedCanvasImages[i] = await generateImageURL();\n      console.log(\"mid of handleFormSubmit \"+updatedCanvasImages[i]);\n    }\n    setCanvasImages(updatedCanvasImages);\n\n    for (let i = 0; i < NUM_IMAGES; i++) {\n        newItems[i].src = updatedCanvasImages[i];\n        newItems[i].altText = userInput;\n        newItems[i].caption = userInput;\n        console.log(\"newItems: \" + newItems[i].src);\n    }\n    setDynamicItems(newItems);\n\n    console.log(\"end of handleFormSubmit \"+generatedImage)\n  };\n\n  // Render the component\n  return (\n      <div className='encyclopedia-container'>\n        <Container>\n        <h1 className='text-center'>Encyclopedia</h1>\n        <h4 className='text-center'>Find information about your enemies.</h4>\n        <Row xs=\"2\" className='xxl'>\n          <Col className=\"text-left\">\n              <form  onSubmit={handleFormSubmit}>\n                  <input className='inputText' type=\"text\" value={userInput} onChange={handleSearchChange} placeholder=\"Search the encyclopedia\" />\n                  {/* Display a spinner while translation is in progress */}\n                  {isLoading && (\n                            <div className=\"spinner-border text-gold\" role=\"status\">\n                                <span className=\"sr-only\">Loading...</span>\n                            </div>\n                        )}\n              </form>\n              <p className='descriptionText'>{responseText}</p>\n          </Col>\n          <Col className='text-right'>\n              <EncyclopediaCarousel items={dynamicItems}/>\n          </Col>\n        </Row>\n        </Container>\n      </div>\n  );\n}\n\nexport default Encyclopedia;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}