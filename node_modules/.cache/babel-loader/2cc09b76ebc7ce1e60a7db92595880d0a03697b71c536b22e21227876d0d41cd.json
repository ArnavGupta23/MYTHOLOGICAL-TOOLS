{"ast":null,"code":"var _jsxFileName = \"/Users/arnavgupta/git/hackathon/src/components/Footers/TranslationGPT.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Translation.css';\n\n// Translation component responsible for text translation\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Translation = () => {\n  _s();\n  // States for input text, translated response, target language, and loading status\n  const [inputText, setInputText] = useState(''); // State for user input text\n  const [responseText, setResponseText] = useState(''); // State for translated response text\n  const [targetLang, setTargetLang] = useState('en'); // State for target language selection\n  const [isLoading, setIsLoading] = useState(false); // State to handle loading status\n\n  // Object containing language options for translation\n  const languageOptions = {\n    \"english\": \"Select\",\n    \"arabic\": \"Arabic\",\n    \"bulgarian\": \"Bulgarian\",\n    \"chinese (simplified)\": \"Chinese (Simplified)\",\n    \"chinese (traditional)\": \"Chinese (Traditional)\",\n    \"croatian\": \"Croatian\",\n    \"czech\": \"Czech\",\n    \"danish\": \"Danish\",\n    \"dutch\": \"Dutch\",\n    \"english\": \"English\",\n    \"estonian\": \"Estonian\",\n    \"finnish\": \"Finnish\",\n    \"french\": \"French\",\n    \"german\": \"German\",\n    \"greek\": \"Greek\",\n    \"hebrew\": \"Hebrew\",\n    \"hindi\": \"Hindi\",\n    \"hungarian\": \"Hungarian\",\n    \"indonesian\": \"Indonesian\",\n    \"italian\": \"Italian\",\n    \"japanese\": \"Japanese\",\n    \"korean\": \"Korean\",\n    \"latvian\": \"Latvian\",\n    \"lithuanian\": \"Lithuanian\",\n    \"norwegian\": \"Norwegian\",\n    \"persian\": \"Persian\",\n    \"polish\": \"Polish\",\n    \"portuguese\": \"Portuguese\",\n    \"romanian\": \"Romanian\",\n    \"russian\": \"Russian\",\n    \"serbian\": \"Serbian\",\n    \"slovak\": \"Slovak\",\n    \"slovenian\": \"Slovenian\",\n    \"spanish\": \"Spanish\",\n    \"swedish\": \"Swedish\",\n    \"thai\": \"Thai\",\n    \"turkish\": \"Turkish\",\n    \"ukrainian\": \"Ukrainian\",\n    \"urdu\": \"Urdu\",\n    \"vietnamese\": \"Vietnamese\"\n    // ... continue adding other languages\n  };\n\n  // Function triggered when the translate button is clicked\n  const handleTranslate = async () => {\n    setResponseText(''); // Reset response text\n    setIsLoading(true); // Set loading state to true\n\n    // Create the prompt text for translation using input text and target language\n    const promptText = `Translate this to ${targetLang}: ${inputText}`;\n    try {\n      // Fetching translation data from an API\n      const response = await fetch('https://jamsapi.hackclub.dev/openai/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer Q3A1YL3AAZWPHNITZOX0A1W8ZI7W75UB6LYEOKAGFKQA47B11G3ZGOCCHMEPJHDJ'\n        },\n        body: JSON.stringify({\n          model: \"gpt-3.5-turbo\",\n          // Specify the translation model\n          messages: [{\n            role: \"user\",\n            // Define user role for interaction\n            content: promptText // Provide the content for translation\n          }]\n        })\n      });\n\n      // Parsing the response data into JSON format\n      const data = await response.json();\n\n      // Set the translated response text to the obtained translation\n      setResponseText(data.choices[0].message.content);\n    } catch (error) {\n      // Handle errors in case of API failure or other issues\n      console.error('Error:', error);\n      setResponseText('Error in processing request');\n    }\n    setIsLoading(false); // Set loading state to false after translation or error handling\n  };\n\n  // Render the translation interface\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid translation-section\",\n    id: \"translate\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Translate Your Enemy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12 col-md-8\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"translation-card p-4 mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"form-control mb-3\",\n            value: inputText,\n            onChange: e => setInputText(e.target.value),\n            placeholder: \"Enter text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-control mb-3\",\n            value: targetLang,\n            onChange: e => setTargetLang(e.target.value),\n            children: Object.entries(languageOptions).map(([code, name]) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: code,\n              children: name\n            }, code, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary mb-3\",\n            onClick: handleTranslate,\n            children: \"Translate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner-border text-gold\",\n            role: \"status\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"sr-only\",\n              children: \"Loading...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"translation-output\",\n            id: \"encyclopedia\",\n            children: responseText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n};\n_s(Translation, \"VJWn7rScIBj7bGkooAM7hx3myyM=\");\n_c = Translation;\nexport default Translation; // Export the Translation component\nvar _c;\n$RefreshReg$(_c, \"Translation\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Translation","_s","inputText","setInputText","responseText","setResponseText","targetLang","setTargetLang","isLoading","setIsLoading","languageOptions","handleTranslate","promptText","response","fetch","method","headers","body","JSON","stringify","model","messages","role","content","data","json","choices","message","error","console","className","id","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","Object","entries","map","code","name","onClick","_c","$RefreshReg$"],"sources":["/Users/arnavgupta/git/hackathon/src/components/Footers/TranslationGPT.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './Translation.css';\n\n// Translation component responsible for text translation\nconst Translation = () => {\n    // States for input text, translated response, target language, and loading status\n    const [inputText, setInputText] = useState(''); // State for user input text\n    const [responseText, setResponseText] = useState(''); // State for translated response text\n    const [targetLang, setTargetLang] = useState('en'); // State for target language selection\n    const [isLoading, setIsLoading] = useState(false); // State to handle loading status\n\n    // Object containing language options for translation\n    const languageOptions = {\n        \"english\": \"Select\",\n        \"arabic\": \"Arabic\",\n        \"bulgarian\": \"Bulgarian\",\n        \"chinese (simplified)\": \"Chinese (Simplified)\",\n        \"chinese (traditional)\": \"Chinese (Traditional)\",\n        \"croatian\": \"Croatian\",\n        \"czech\": \"Czech\",\n        \"danish\": \"Danish\",\n        \"dutch\": \"Dutch\",\n        \"english\": \"English\",\n        \"estonian\": \"Estonian\",\n        \"finnish\": \"Finnish\",\n        \"french\": \"French\",\n        \"german\": \"German\",\n        \"greek\": \"Greek\",\n        \"hebrew\": \"Hebrew\",\n        \"hindi\": \"Hindi\",\n        \"hungarian\": \"Hungarian\",\n        \"indonesian\": \"Indonesian\",\n        \"italian\": \"Italian\",\n        \"japanese\": \"Japanese\",\n        \"korean\": \"Korean\",\n        \"latvian\": \"Latvian\",\n        \"lithuanian\": \"Lithuanian\",\n        \"norwegian\": \"Norwegian\",\n        \"persian\": \"Persian\",\n        \"polish\": \"Polish\",\n        \"portuguese\": \"Portuguese\",\n        \"romanian\": \"Romanian\",\n        \"russian\": \"Russian\",\n        \"serbian\": \"Serbian\",\n        \"slovak\": \"Slovak\",\n        \"slovenian\": \"Slovenian\",\n        \"spanish\": \"Spanish\",\n        \"swedish\": \"Swedish\",\n        \"thai\": \"Thai\",\n        \"turkish\": \"Turkish\",\n        \"ukrainian\": \"Ukrainian\",\n        \"urdu\": \"Urdu\",\n        \"vietnamese\": \"Vietnamese\",\n        // ... continue adding other languages\n    };\n\n    // Function triggered when the translate button is clicked\n    const handleTranslate = async () => {\n        setResponseText(''); // Reset response text\n        setIsLoading(true); // Set loading state to true\n\n        // Create the prompt text for translation using input text and target language\n        const promptText = `Translate this to ${targetLang}: ${inputText}`;\n    \n        try {\n            // Fetching translation data from an API\n            const response = await fetch('https://jamsapi.hackclub.dev/openai/chat/completions', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer Q3A1YL3AAZWPHNITZOX0A1W8ZI7W75UB6LYEOKAGFKQA47B11G3ZGOCCHMEPJHDJ'\n                },\n                body: JSON.stringify({\n                    model: \"gpt-3.5-turbo\", // Specify the translation model\n                    messages: [{\n                        role: \"user\", // Define user role for interaction\n                        content: promptText // Provide the content for translation\n                    }]\n                })\n            });\n            \n            // Parsing the response data into JSON format\n            const data = await response.json();\n            \n            // Set the translated response text to the obtained translation\n            setResponseText(data.choices[0].message.content);\n        } catch (error) {\n            // Handle errors in case of API failure or other issues\n            console.error('Error:', error);\n            setResponseText('Error in processing request');\n        }\n\n        setIsLoading(false); // Set loading state to false after translation or error handling\n    };\n    \n    // Render the translation interface\n    return (\n        <div className=\"container-fluid translation-section\" id=\"translate\">\n            <div className=\"header\">\n                <h2>Translate Your Enemy</h2>\n            </div>\n            <div className=\"row justify-content-center\">\n                <div className=\"col-12 col-md-8\">\n                    <div className=\"translation-card p-4 mb-3\">\n                        {/* Input area for the user to enter text for translation */}\n                        <textarea \n                            className=\"form-control mb-3\"\n                            value={inputText}\n                            onChange={(e) => setInputText(e.target.value)}\n                            placeholder=\"Enter text\"\n                        />\n                        {/* Dropdown to select the target language */}\n                        <select \n                            className=\"form-control mb-3\"\n                            value={targetLang} \n                            onChange={(e) => setTargetLang(e.target.value)}\n                        >\n                            {Object.entries(languageOptions).map(([code, name]) => (\n                                <option key={code} value={code}>{name}</option>\n                            ))}\n                        </select>\n                        {/* Button to trigger the translation process */}\n                        <button \n                            className=\"btn btn-primary mb-3\"\n                            onClick={handleTranslate}\n                        >\n                            Translate\n                        </button>\n\n                        {/* Display a spinner while translation is in progress */}\n                        {isLoading && (\n                            <div className=\"spinner-border text-gold\" role=\"status\">\n                                <span className=\"sr-only\">Loading...</span>\n                            </div>\n                        )}\n\n                        {/* Display the translated text */}\n                        <p className=\"translation-output\" id=\"encyclopedia\">{responseText}</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Translation; // Export the Translation component\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}