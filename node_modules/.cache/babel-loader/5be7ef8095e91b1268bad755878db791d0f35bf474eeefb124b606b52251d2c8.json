{"ast":null,"code":"var _jsxFileName = \"/Users/arnavgupta/git/hackathon/src/components/Footers/Translation.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport translate from 'translate-google-api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Translation = () => {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [translatedText, setTranslatedText] = useState('');\n  const [sourceLang, setSourceLang] = useState('auto');\n  const [targetLang, setTargetLang] = useState('en');\n  const languageOptions = {\n    \"auto\": \"Detect Language\",\n    \"en\": \"English\",\n    \"es\": \"Spanish\",\n    \"fr\": \"French\",\n    \"de\": \"German\",\n    \"zh-CN\": \"Chinese (Simplified)\",\n    \"zh-TW\": \"Chinese (Traditional)\",\n    \"da\": \"Danish\",\n    \"nl\": \"Dutch\",\n    \"fi\": \"Finnish\",\n    \"el\": \"Greek\",\n    \"hi\": \"Hindi\",\n    \"it\": \"Italian\",\n    \"ja\": \"Japanese\",\n    \"ko\": \"Korean\",\n    \"no\": \"Norwegian\",\n    \"pl\": \"Polish\",\n    \"pt\": \"Portuguese\",\n    \"ru\": \"Russian\",\n    \"sv\": \"Swedish\",\n    \"tr\": \"Turkish\",\n    \"cs\": \"Czech\",\n    \"ro\": \"Romanian\",\n    \"hu\": \"Hungarian\",\n    \"sk\": \"Slovak\",\n    \"sl\": \"Slovenian\",\n    \"lt\": \"Lithuanian\",\n    \"lv\": \"Latvian\",\n    \"et\": \"Estonian\",\n    \"bg\": \"Bulgarian\",\n    \"hr\": \"Croatian\",\n    \"sr\": \"Serbian\",\n    \"uk\": \"Ukrainian\",\n    \"he\": \"Hebrew\",\n    \"ur\": \"Urdu\",\n    \"ar\": \"Arabic\",\n    \"fa\": \"Persian\",\n    \"th\": \"Thai\",\n    \"vi\": \"Vietnamese\",\n    \"id\": \"Indonesian\"\n    // ... continue adding other languages\n  };\n  const handleTranslate = async () => {\n    try {\n      const result = await translate(inputText, {\n        from: sourceLang,\n        to: targetLang\n      });\n      setTranslatedText(result[0]);\n    } catch (error) {\n      console.error('Translation error:', error);\n      setTranslatedText('Error in translation');\n    }\n  };\n  const testingTranslation = async () => {\n    const result = await translate(`I'm fine.`, {\n      tld: \"cn\",\n      to: \"vi\"\n    });\n    console.log(result);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: inputText,\n      onChange: e => setInputText(e.target.value),\n      placeholder: \"Enter text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: sourceLang,\n      onChange: e => setSourceLang(e.target.value),\n      children: Object.entries(languageOptions).map(([code, name]) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: code,\n        children: name\n      }, code, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: targetLang,\n      onChange: e => setTargetLang(e.target.value),\n      children: Object.entries(languageOptions).map(([code, name]) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: code,\n        children: name\n      }, code, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleTranslate,\n      children: \"Translate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), \"// \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: testingTranslation,\n      children: \"Testing the translate on console\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Translated Text:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: translatedText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n_s(Translation, \"DvXoN27XF3c2sUhRA7lWlFhVPag=\");\n_c = Translation;\nexport default Translation;\nvar _c;\n$RefreshReg$(_c, \"Translation\");","map":{"version":3,"names":["React","useState","translate","jsxDEV","_jsxDEV","Translation","_s","inputText","setInputText","translatedText","setTranslatedText","sourceLang","setSourceLang","targetLang","setTargetLang","languageOptions","handleTranslate","result","from","to","error","console","testingTranslation","tld","log","children","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","map","code","name","onClick","_c","$RefreshReg$"],"sources":["/Users/arnavgupta/git/hackathon/src/components/Footers/Translation.js"],"sourcesContent":["import React, { useState } from 'react';\nimport translate from 'translate-google-api';\n\nconst Translation = () => {\n    const [inputText, setInputText] = useState('');\n    const [translatedText, setTranslatedText] = useState('');\n    const [sourceLang, setSourceLang] = useState('auto');\n    const [targetLang, setTargetLang] = useState('en');\n\n\n    const languageOptions = {\n        \"auto\": \"Detect Language\",\n        \"en\": \"English\",\n        \"es\": \"Spanish\",\n        \"fr\": \"French\",\n        \"de\": \"German\",\n        \"zh-CN\": \"Chinese (Simplified)\",\n        \"zh-TW\": \"Chinese (Traditional)\",\n        \"da\": \"Danish\",\n        \"nl\": \"Dutch\",\n        \"fi\": \"Finnish\",\n        \"el\": \"Greek\",\n        \"hi\": \"Hindi\",\n        \"it\": \"Italian\",\n        \"ja\": \"Japanese\",\n        \"ko\": \"Korean\",\n        \"no\": \"Norwegian\",\n        \"pl\": \"Polish\",\n        \"pt\": \"Portuguese\",\n        \"ru\": \"Russian\",\n        \"sv\": \"Swedish\",\n        \"tr\": \"Turkish\",\n        \"cs\": \"Czech\",\n        \"ro\": \"Romanian\",\n        \"hu\": \"Hungarian\",\n        \"sk\": \"Slovak\",\n        \"sl\": \"Slovenian\",\n        \"lt\": \"Lithuanian\",\n        \"lv\": \"Latvian\",\n        \"et\": \"Estonian\",\n        \"bg\": \"Bulgarian\",\n        \"hr\": \"Croatian\",\n        \"sr\": \"Serbian\",\n        \"uk\": \"Ukrainian\",\n        \"he\": \"Hebrew\",\n        \"ur\": \"Urdu\",\n        \"ar\": \"Arabic\",\n        \"fa\": \"Persian\",\n        \"th\": \"Thai\",\n        \"vi\": \"Vietnamese\",\n        \"id\": \"Indonesian\",\n        // ... continue adding other languages\n    };\n    \n\n    const handleTranslate = async () => {\n        try {\n            const result = await translate(inputText, { from: sourceLang, to: targetLang });\n            setTranslatedText(result[0]);\n        } catch (error) {\n            console.error('Translation error:', error);\n            setTranslatedText('Error in translation');\n        }\n    }\n\n    const  testingTranslation = async () => {\n        const result = await translate(`I'm fine.`, {\n            tld: \"cn\",\n            to: \"vi\",\n          });\n          \n          console.log(result);\n    }\n\n    return (\n        <div>\n            <textarea \n                value={inputText}\n                onChange={(e) => setInputText(e.target.value)}\n                placeholder=\"Enter text\"\n            />\n            <select value={sourceLang} onChange={(e) => setSourceLang(e.target.value)}>\n                {Object.entries(languageOptions).map(([code, name]) => (\n                    <option key={code} value={code}>{name}</option>\n                ))}\n            </select>\n            <select value={targetLang} onChange={(e) => setTargetLang(e.target.value)}>\n                {Object.entries(languageOptions).map(([code, name]) => (\n                    <option key={code} value={code}>{name}</option>\n                ))}\n            </select>\n            <button onClick={handleTranslate}>Translate</button>\n           // <button onClick={testingTranslation}>Testing the translate on console</button>\n            <div>\n                <p>Translated Text:</p>\n                <p>{translatedText}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Translation;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}