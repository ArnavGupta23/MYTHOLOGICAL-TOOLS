{"ast":null,"code":"var _jsxFileName = \"/Users/arnavgupta/git/hackathon/src/components/Footers/TranslationGPT.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n//import axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Translation = () => {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [responseText, setResponseText] = useState('');\n  const [targetLang, setTargetLang] = useState('en');\n  const [isLoading, setIsLoading] = useState(false); // Add loading state\n\n  const languageOptions = {\n    \"en\": \"English\",\n    \"es\": \"Spanish\",\n    \"fr\": \"French\",\n    \"de\": \"German\",\n    \"zh-CN\": \"Chinese (Simplified)\",\n    \"zh-TW\": \"Chinese (Traditional)\",\n    \"da\": \"Danish\",\n    \"nl\": \"Dutch\",\n    \"fi\": \"Finnish\",\n    \"el\": \"Greek\",\n    \"hi\": \"Hindi\",\n    \"it\": \"Italian\",\n    \"ja\": \"Japanese\",\n    \"ko\": \"Korean\",\n    \"no\": \"Norwegian\",\n    \"pl\": \"Polish\",\n    \"pt\": \"Portuguese\",\n    \"ru\": \"Russian\",\n    \"sv\": \"Swedish\",\n    \"tr\": \"Turkish\",\n    \"cs\": \"Czech\",\n    \"ro\": \"Romanian\",\n    \"hu\": \"Hungarian\",\n    \"sk\": \"Slovak\",\n    \"sl\": \"Slovenian\",\n    \"lt\": \"Lithuanian\",\n    \"lv\": \"Latvian\",\n    \"et\": \"Estonian\",\n    \"bg\": \"Bulgarian\",\n    \"hr\": \"Croatian\",\n    \"sr\": \"Serbian\",\n    \"uk\": \"Ukrainian\",\n    \"he\": \"Hebrew\",\n    \"ur\": \"Urdu\",\n    \"ar\": \"Arabic\",\n    \"fa\": \"Persian\",\n    \"th\": \"Thai\",\n    \"vi\": \"Vietnamese\",\n    \"id\": \"Indonesian\"\n    // ... continue adding other languages\n  };\n  const handleTranslate = async () => {\n    setResponseText('');\n    setIsLoading(true); // Start loading\n    const promptText = `Translate this to ${targetLang}: ${inputText}`;\n    try {\n      const response = await fetch('https://jamsapi.hackclub.dev/openai/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer Q3A1YL3AAZWPHNITZOX0A1W8ZI7W75UB6LYEOKAGFKQA47B11G3ZGOCCHMEPJHDJ'\n        },\n        body: JSON.stringify({\n          model: \"gpt-3.5-turbo\",\n          // Specify the model here\n          messages: [{\n            role: \"user\",\n            // Role can be 'user' or 'assistant'\n            content: promptText\n          }]\n        })\n      });\n      const data = await response.json();\n      //now just processing the data\n      setResponseText(data.choices[0].message.content);\n    } catch (error) {\n      console.error('Error:', error);\n      setResponseText('Error in processing request');\n    }\n    setIsLoading(false); // Stop loading\n  };\n\n  // const handleTranslate2 = async () => {\n  //     try {\n  //         const promptText = `Translate this to ${targetLang}: ${inputText}`;\n\n  //         const response = await axios.post(\n  //             'https://api.openai.com/v1/engines/davinci-codex/completions',\n  //             {\n  //                 prompt: promptText,\n  //                 max_tokens: 60\n  //             },\n  //             {\n  //                 headers: {\n  //                     'Authorization': `Bearer Q3A1YL3AAZWPHNITZOX0A1W8ZI7W75UB6LYEOKAGFKQA47B11G3ZGOCCHMEPJHDJ`,\n  //                     'Content-Type': 'application/json'\n  //                 }\n  //             }\n  //         );\n  //         setResponseText(response.data.choices[0].text);\n  //     } catch (error) {\n  //         console.error('Error:', error);\n  //         setResponseText('Error in processing request');\n  //     }\n  // };\n\n  // return (\n  //     <div>\n  //         <textarea \n  //             value={inputText}\n  //             onChange={(e) => setInputText(e.target.value)}\n  //             placeholder=\"Enter text\"\n  //         />\n  //         <select value={targetLang} onChange={(e) => setTargetLang(e.target.value)}>\n  //             {Object.entries(languageOptions).map(([code, name]) => (\n  //                 <option key={code} value={code}>{name}</option>\n  //             ))}\n  //         </select>\n  //         <button onClick={handleTranslate}>Translate</button>\n\n  //         <div>\n  //             <p>Translation:</p>\n\n  //             {/* Spinner */}\n  //              {isLoading && (\n  //             <div className=\"spinner-border text-success\" role=\"status\">\n  //                 <span className=\"sr-only\">Loading...</span>\n  //             </div>\n  //              )}\n\n  //             <p>{responseText}</p>\n  //         </div>\n  //     </div>\n  // );\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid translation-section\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12 col-md-8\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"translation-card p-4 mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"form-control mb-3\",\n            value: inputText,\n            onChange: e => setInputText(e.target.value),\n            placeholder: \"Enter text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-control mb-3\",\n            value: targetLang,\n            onChange: e => setTargetLang(e.target.value),\n            children: Object.entries(languageOptions).map(([code, name]) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: code,\n              children: name\n            }, code, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary mb-3\",\n            onClick: handleTranslate,\n            children: \"Translate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 25\n          }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner-border text-gold\",\n            role: \"status\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"sr-only\",\n              children: \"Loading...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"translation-output\",\n            children: responseText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 9\n  }, this);\n};\n_s(Translation, \"VJWn7rScIBj7bGkooAM7hx3myyM=\");\n_c = Translation;\nexport default Translation;\nvar _c;\n$RefreshReg$(_c, \"Translation\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Translation","_s","inputText","setInputText","responseText","setResponseText","targetLang","setTargetLang","isLoading","setIsLoading","languageOptions","handleTranslate","promptText","response","fetch","method","headers","body","JSON","stringify","model","messages","role","content","data","json","choices","message","error","console","className","children","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","map","code","name","onClick","_c","$RefreshReg$"],"sources":["/Users/arnavgupta/git/hackathon/src/components/Footers/TranslationGPT.js"],"sourcesContent":["import React, { useState } from 'react';\n//import axios from 'axios';\n\nconst Translation = () => {\n    const [inputText, setInputText] = useState('');\n    const [responseText, setResponseText] = useState('');\n    const [targetLang, setTargetLang] = useState('en');\n    const [isLoading, setIsLoading] = useState(false); // Add loading state\n\n    const languageOptions = {\n        \"en\": \"English\",\n        \"es\": \"Spanish\",\n        \"fr\": \"French\",\n        \"de\": \"German\",\n        \"zh-CN\": \"Chinese (Simplified)\",\n        \"zh-TW\": \"Chinese (Traditional)\",\n        \"da\": \"Danish\",\n        \"nl\": \"Dutch\",\n        \"fi\": \"Finnish\",\n        \"el\": \"Greek\",\n        \"hi\": \"Hindi\",\n        \"it\": \"Italian\",\n        \"ja\": \"Japanese\",\n        \"ko\": \"Korean\",\n        \"no\": \"Norwegian\",\n        \"pl\": \"Polish\",\n        \"pt\": \"Portuguese\",\n        \"ru\": \"Russian\",\n        \"sv\": \"Swedish\",\n        \"tr\": \"Turkish\",\n        \"cs\": \"Czech\",\n        \"ro\": \"Romanian\",\n        \"hu\": \"Hungarian\",\n        \"sk\": \"Slovak\",\n        \"sl\": \"Slovenian\",\n        \"lt\": \"Lithuanian\",\n        \"lv\": \"Latvian\",\n        \"et\": \"Estonian\",\n        \"bg\": \"Bulgarian\",\n        \"hr\": \"Croatian\",\n        \"sr\": \"Serbian\",\n        \"uk\": \"Ukrainian\",\n        \"he\": \"Hebrew\",\n        \"ur\": \"Urdu\",\n        \"ar\": \"Arabic\",\n        \"fa\": \"Persian\",\n        \"th\": \"Thai\",\n        \"vi\": \"Vietnamese\",\n        \"id\": \"Indonesian\",\n        // ... continue adding other languages\n    };\n\n\n    const handleTranslate = async () => {\n        setResponseText('');\n        setIsLoading(true); // Start loading\n        const promptText = `Translate this to ${targetLang}: ${inputText}`;\n    \n        try {\n            const response = await fetch('https://jamsapi.hackclub.dev/openai/chat/completions', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer Q3A1YL3AAZWPHNITZOX0A1W8ZI7W75UB6LYEOKAGFKQA47B11G3ZGOCCHMEPJHDJ'\n                },\n                body: JSON.stringify({\n                    model: \"gpt-3.5-turbo\", // Specify the model here\n                    messages: [{\n                        role: \"user\", // Role can be 'user' or 'assistant'\n                        content: promptText\n                    }]\n                })\n            });\n            const data = await response.json();\n            //now just processing the data\n            setResponseText(data.choices[0].message.content);\n        } catch (error) {\n            console.error('Error:', error);\n            setResponseText('Error in processing request');\n        }\n\n        setIsLoading(false); // Stop loading\n\n    };\n    \n    \n    \n\n\n\n\n\n\n    // const handleTranslate2 = async () => {\n    //     try {\n    //         const promptText = `Translate this to ${targetLang}: ${inputText}`;\n\n    //         const response = await axios.post(\n    //             'https://api.openai.com/v1/engines/davinci-codex/completions',\n    //             {\n    //                 prompt: promptText,\n    //                 max_tokens: 60\n    //             },\n    //             {\n    //                 headers: {\n    //                     'Authorization': `Bearer Q3A1YL3AAZWPHNITZOX0A1W8ZI7W75UB6LYEOKAGFKQA47B11G3ZGOCCHMEPJHDJ`,\n    //                     'Content-Type': 'application/json'\n    //                 }\n    //             }\n    //         );\n    //         setResponseText(response.data.choices[0].text);\n    //     } catch (error) {\n    //         console.error('Error:', error);\n    //         setResponseText('Error in processing request');\n    //     }\n    // };\n\n    // return (\n    //     <div>\n    //         <textarea \n    //             value={inputText}\n    //             onChange={(e) => setInputText(e.target.value)}\n    //             placeholder=\"Enter text\"\n    //         />\n    //         <select value={targetLang} onChange={(e) => setTargetLang(e.target.value)}>\n    //             {Object.entries(languageOptions).map(([code, name]) => (\n    //                 <option key={code} value={code}>{name}</option>\n    //             ))}\n    //         </select>\n    //         <button onClick={handleTranslate}>Translate</button>\n\n    //         <div>\n    //             <p>Translation:</p>\n\n    //             {/* Spinner */}\n    //              {isLoading && (\n    //             <div className=\"spinner-border text-success\" role=\"status\">\n    //                 <span className=\"sr-only\">Loading...</span>\n    //             </div>\n    //              )}\n\n    //             <p>{responseText}</p>\n    //         </div>\n    //     </div>\n    // );\n\n\n    return (\n        <div className=\"container-fluid translation-section\">\n            <div className=\"row justify-content-center\">\n                <div className=\"col-12 col-md-8\">\n                    <div className=\"translation-card p-4 mb-3\">\n                        <textarea \n                            className=\"form-control mb-3\"\n                            value={inputText}\n                            onChange={(e) => setInputText(e.target.value)}\n                            placeholder=\"Enter text\"\n                        />\n                        <select \n                            className=\"form-control mb-3\"\n                            value={targetLang} \n                            onChange={(e) => setTargetLang(e.target.value)}\n                        >\n                            {Object.entries(languageOptions).map(([code, name]) => (\n                                <option key={code} value={code}>{name}</option>\n                            ))}\n                        </select>\n                        <button \n                            className=\"btn btn-primary mb-3\"\n                            onClick={handleTranslate}\n                        >\n                            Translate\n                        </button>\n\n                        {/* Spinner */}\n                        {isLoading && (\n                            <div className=\"spinner-border text-gold\" role=\"status\">\n                                <span className=\"sr-only\">Loading...</span>\n                            </div>\n                        )}\n\n                        <p className=\"translation-output\">{responseText}</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n\n\n}\n\nexport default Translation;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}