{"ast":null,"code":"var _jsxFileName = \"/Users/arnavgupta/git/hackathon/src/components/Footers/TranslationGPT.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Translation = () => {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [responseText, setResponseText] = useState('');\n  const [targetLang, setTargetLang] = useState('en');\n  const languageOptions = {\n    \"en\": \"English\",\n    \"es\": \"Spanish\",\n    \"fr\": \"French\",\n    \"de\": \"German\",\n    \"zh-CN\": \"Chinese (Simplified)\",\n    \"zh-TW\": \"Chinese (Traditional)\",\n    \"da\": \"Danish\",\n    \"nl\": \"Dutch\",\n    \"fi\": \"Finnish\",\n    \"el\": \"Greek\",\n    \"hi\": \"Hindi\",\n    \"it\": \"Italian\",\n    \"ja\": \"Japanese\",\n    \"ko\": \"Korean\",\n    \"no\": \"Norwegian\",\n    \"pl\": \"Polish\",\n    \"pt\": \"Portuguese\",\n    \"ru\": \"Russian\",\n    \"sv\": \"Swedish\",\n    \"tr\": \"Turkish\",\n    \"cs\": \"Czech\",\n    \"ro\": \"Romanian\",\n    \"hu\": \"Hungarian\",\n    \"sk\": \"Slovak\",\n    \"sl\": \"Slovenian\",\n    \"lt\": \"Lithuanian\",\n    \"lv\": \"Latvian\",\n    \"et\": \"Estonian\",\n    \"bg\": \"Bulgarian\",\n    \"hr\": \"Croatian\",\n    \"sr\": \"Serbian\",\n    \"uk\": \"Ukrainian\",\n    \"he\": \"Hebrew\",\n    \"ur\": \"Urdu\",\n    \"ar\": \"Arabic\",\n    \"fa\": \"Persian\",\n    \"th\": \"Thai\",\n    \"vi\": \"Vietnamese\",\n    \"id\": \"Indonesian\"\n    // ... continue adding other languages\n  };\n  const handleTranslate = async () => {\n    const promptText = `Translate this to ${targetLang}: ${inputText}`;\n    try {\n      const response = await fetch('https://jamsapi.hackclub.dev/openai/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer Q3A1YL3AAZWPHNITZOX0A1W8ZI7W75UB6LYEOKAGFKQA47B11G3ZGOCCHMEPJHDJ'\n        },\n        body: JSON.stringify({\n          prompt: promptText\n        }) // Include the prompt in the body\n      });\n      const data = await response.json();\n      // Process the response data, e.g., display it or use it in your application\n    } catch (error) {\n      console.error('Error:', error);\n      // Handle any errors\n    }\n  };\n  const handleTranslate2 = async () => {\n    try {\n      const promptText = `Translate this to ${targetLang}: ${inputText}`;\n      const response = await axios.post('https://api.openai.com/v1/engines/davinci-codex/completions', {\n        prompt: promptText,\n        max_tokens: 60\n      }, {\n        headers: {\n          'Authorization': `Bearer Q3A1YL3AAZWPHNITZOX0A1W8ZI7W75UB6LYEOKAGFKQA47B11G3ZGOCCHMEPJHDJ`,\n          'Content-Type': 'application/json'\n        }\n      });\n      setResponseText(response.data.choices[0].text);\n    } catch (error) {\n      console.error('Error:', error);\n      setResponseText('Error in processing request');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: inputText,\n      onChange: e => setInputText(e.target.value),\n      placeholder: \"Enter text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: targetLang,\n      onChange: e => setTargetLang(e.target.value),\n      children: Object.entries(languageOptions).map(([code, name]) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: code,\n        children: name\n      }, code, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleTranslate,\n      children: \"Translate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"ChatGPT Response:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: responseText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n};\n_s(Translation, \"gEsja78pQ3wp9Vb51Rho66kCpRw=\");\n_c = Translation;\nexport default Translation;\nvar _c;\n$RefreshReg$(_c, \"Translation\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Translation","_s","inputText","setInputText","responseText","setResponseText","targetLang","setTargetLang","languageOptions","handleTranslate","promptText","response","fetch","method","headers","body","JSON","stringify","prompt","data","json","error","console","handleTranslate2","post","max_tokens","choices","text","children","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","map","code","name","onClick","_c","$RefreshReg$"],"sources":["/Users/arnavgupta/git/hackathon/src/components/Footers/TranslationGPT.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nconst Translation = () => {\n    const [inputText, setInputText] = useState('');\n    const [responseText, setResponseText] = useState('');\n    const [targetLang, setTargetLang] = useState('en');\n\n    const languageOptions = {\n        \"en\": \"English\",\n        \"es\": \"Spanish\",\n        \"fr\": \"French\",\n        \"de\": \"German\",\n        \"zh-CN\": \"Chinese (Simplified)\",\n        \"zh-TW\": \"Chinese (Traditional)\",\n        \"da\": \"Danish\",\n        \"nl\": \"Dutch\",\n        \"fi\": \"Finnish\",\n        \"el\": \"Greek\",\n        \"hi\": \"Hindi\",\n        \"it\": \"Italian\",\n        \"ja\": \"Japanese\",\n        \"ko\": \"Korean\",\n        \"no\": \"Norwegian\",\n        \"pl\": \"Polish\",\n        \"pt\": \"Portuguese\",\n        \"ru\": \"Russian\",\n        \"sv\": \"Swedish\",\n        \"tr\": \"Turkish\",\n        \"cs\": \"Czech\",\n        \"ro\": \"Romanian\",\n        \"hu\": \"Hungarian\",\n        \"sk\": \"Slovak\",\n        \"sl\": \"Slovenian\",\n        \"lt\": \"Lithuanian\",\n        \"lv\": \"Latvian\",\n        \"et\": \"Estonian\",\n        \"bg\": \"Bulgarian\",\n        \"hr\": \"Croatian\",\n        \"sr\": \"Serbian\",\n        \"uk\": \"Ukrainian\",\n        \"he\": \"Hebrew\",\n        \"ur\": \"Urdu\",\n        \"ar\": \"Arabic\",\n        \"fa\": \"Persian\",\n        \"th\": \"Thai\",\n        \"vi\": \"Vietnamese\",\n        \"id\": \"Indonesian\",\n        // ... continue adding other languages\n    };\n\n\n    const handleTranslate = async () => {\n        const promptText = `Translate this to ${targetLang}: ${inputText}`;\n    \n        try {\n            const response = await fetch('https://jamsapi.hackclub.dev/openai/chat/completions', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer Q3A1YL3AAZWPHNITZOX0A1W8ZI7W75UB6LYEOKAGFKQA47B11G3ZGOCCHMEPJHDJ'\n                },\n                body: JSON.stringify({ prompt: promptText }) // Include the prompt in the body\n            });\n            const data = await response.json();\n            // Process the response data, e.g., display it or use it in your application\n        } catch (error) {\n            console.error('Error:', error);\n            // Handle any errors\n        }\n    };\n    \n\n\n\n\n\n\n    const handleTranslate2 = async () => {\n        try {\n            const promptText = `Translate this to ${targetLang}: ${inputText}`;\n\n            const response = await axios.post(\n                'https://api.openai.com/v1/engines/davinci-codex/completions',\n                {\n                    prompt: promptText,\n                    max_tokens: 60\n                },\n                {\n                    headers: {\n                        'Authorization': `Bearer Q3A1YL3AAZWPHNITZOX0A1W8ZI7W75UB6LYEOKAGFKQA47B11G3ZGOCCHMEPJHDJ`,\n                        'Content-Type': 'application/json'\n                    }\n                }\n            );\n            setResponseText(response.data.choices[0].text);\n        } catch (error) {\n            console.error('Error:', error);\n            setResponseText('Error in processing request');\n        }\n    };\n\n    return (\n        <div>\n            <textarea \n                value={inputText}\n                onChange={(e) => setInputText(e.target.value)}\n                placeholder=\"Enter text\"\n            />\n            <select value={targetLang} onChange={(e) => setTargetLang(e.target.value)}>\n                {Object.entries(languageOptions).map(([code, name]) => (\n                    <option key={code} value={code}>{name}</option>\n                ))}\n            </select>\n            <button onClick={handleTranslate}>Translate</button>\n            <div>\n                <p>ChatGPT Response:</p>\n                <p>{responseText}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Translation;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}